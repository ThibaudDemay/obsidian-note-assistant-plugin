/*
 * File Name         : NoConversationState.tsx
 * Description       : No conversation state component to prompt user to create or load conversations
 * Author            : Thibaud Demay (thibaud@demay.dev)
 * Created At        : 25/08/2025 18:11:15
 * ----
 * Last Modified By  : Thibaud Demay (thibaud@demay.dev)
 * Last Modified At  : 25/08/2025 21:23:42
 */

import React from 'react';

import { ConversationData } from '@/@types/services/StorageService';
import { ObsidianIcon } from '@/react/components/shared';

import styles from './NoConversationState.module.css';

interface NoConversationStateProps {
    conversations: ConversationData[];
    onNewConversation: () => void;
    onLoadConversation: (id: string) => void;
}

export const NoConversationState: React.FC<NoConversationStateProps> = ({
    conversations,
    onNewConversation,
    onLoadConversation
}) => {
    const getDisplayTitle = (conversation: ConversationData): { title: string; isAutoGenerated: boolean } => {
        // Si le titre est encore "Nouvelle conversation" ou vide, g√©n√©rer un placeholder
        if (!conversation.title ||
            conversation.title === 'Nouvelle conversation' ||
            conversation.title.trim() === '') {

            // Essayer de g√©n√©rer un titre bas√© sur le premier message utilisateur
            const firstUserMessage = conversation.messages.find(m => m.role === 'user');
            if (firstUserMessage) {
                const content = firstUserMessage.content.trim();
                const title = content.length > 40
                    ? content.substring(0, 37) + '...'
                    : content;
                return { title, isAutoGenerated: true };
            }

            // Sinon, utiliser un placeholder avec la date
            const date = new Date(conversation.createdAt);
            const title = `Conversation du ${date.toLocaleDateString('fr-FR', {
                day: 'numeric',
                month: 'short',
                hour: '2-digit',
                minute: '2-digit'
            })}`;
            return { title, isAutoGenerated: true };
        }

        return { title: conversation.title, isAutoGenerated: false };
    };

    const formatDate = (timestamp: number): string => {
        const date = new Date(timestamp);
        const now = new Date();
        const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);

        if (diffInHours < 24) {
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        } else if (diffInHours < 24 * 7) {
            return date.toLocaleDateString([], { weekday: 'short' });
        } else {
            return date.toLocaleDateString([], { month: 'short', day: 'numeric' });
        }
    };

    const recentConversations = conversations.slice(0, 3);

    return (
        <div className={styles.noConversationState}>
            <div className={styles.noConversationContent}>
                <div className={styles.noConversationIcon}>üí¨</div>
                <h3 className={styles.noConversationTitle}>Aucune conversation active</h3>
                <p className={styles.noConversationText}>
                    Cr√©ez une nouvelle conversation pour commencer √† discuter avec votre assistant IA.
                </p>

                <div className={styles.noConversationActions}>
                    <button
                        className={styles.newConversationButtonLarge}
                        onClick={onNewConversation}
                    >
                        <span><ObsidianIcon iconName='message-circle-plus'/> Nouvelle conversation</span>
                    </button>

                    {/* Afficher les 3 derni√®res conversations s'il y en a */}
                    {conversations.length > 0 && (
                        <div className={styles.recentConversations}>
                            <h4 className={styles.recentConversationsTitle}>Conversations r√©centes</h4>
                            <div className={styles.recentConversationsList}>
                                {recentConversations.map((conversation) => (
                                    <button
                                        key={conversation.id}
                                        className={styles.recentConversationItem}
                                        onClick={() => onLoadConversation(conversation.id)}
                                        title={`${conversation.messages.length} messages - Derni√®re mise √† jour: ${new Date(conversation.updatedAt).toLocaleDateString()}`}
                                    >
                                        <div
                                            className={styles.recentConversationTitle}
                                            data-auto-generated={getDisplayTitle(conversation).isAutoGenerated}
                                        >
                                            {getDisplayTitle(conversation).title}
                                        </div>
                                        <div className={styles.recentConversationMeta}>
                                            <span className={styles.recentMessageCount}>
                                                {conversation.messages.length} messages
                                            </span>
                                            <span className={styles.recentDate}>
                                                {formatDate(conversation.updatedAt)}
                                            </span>
                                        </div>
                                    </button>
                                ))}
                            </div>

                            {conversations.length > 3 && (
                                <p className={styles.moreConversationsHint}>
                                    Et {conversations.length - 3} autre(s) conversation(s) dans le menu d√©roulant
                                </p>
                            )}
                        </div>
                    )}

                    {conversations.length === 0 && (
                        <p className={styles.noConversationHint}>
                            Commencez votre premi√®re conversation avec l&apos;assistant IA
                        </p>
                    )}
                </div>
            </div>
        </div>
    );
};
