/*
 * File Name         : ConversationManager.tsx
 * Description       : Component to access to saved conversations, create, rename and delete them.
 * Author            : Thibaud Demay (thibaud@demay.dev)
 * Created At        : 25/08/2025 18:11:15
 * ----
 * Last Modified By  : Thibaud Demay (thibaud@demay.dev)
 * Last Modified At  : 25/08/2025 21:23:21
 */

import React, { useEffect, useRef, useState } from 'react';

import { ConversationData } from '@/@types/services/StorageService';
import { ObsidianIcon } from '@/react/components/shared';

import styles from './ConversationManager.module.css';

interface ConversationManagerProps {
    conversations: ConversationData[];
    currentConversation: ConversationData | null;
    onNewConversation: () => void;
    onLoadConversation: (id: string) => void;
    onDeleteConversation: (id: string) => void;
    onRenameConversation?: (id: string, newTitle: string) => void;
}

export const ConversationManager: React.FC<ConversationManagerProps> = ({
    conversations,
    currentConversation,
    onNewConversation,
    onLoadConversation,
    onDeleteConversation,
    onRenameConversation
}) => {
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const [editingId, setEditingId] = useState<string | null>(null);
    const [editTitle, setEditTitle] = useState('');

    const dropdownRef = useRef<HTMLDivElement>(null);
    const buttonRef = useRef<HTMLButtonElement>(null);

    // Fermer le dropdown quand on clique à l'extérieur
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node) &&
                buttonRef.current && !buttonRef.current.contains(event.target as Node)) {
                setIsDropdownOpen(false);
                setEditingId(null);
            }
        };

        if (isDropdownOpen) {
            document.addEventListener('mousedown', handleClickOutside);
            return () => document.removeEventListener('mousedown', handleClickOutside);
        }
    }, [isDropdownOpen]);

    const getDisplayTitle = (conversation: ConversationData): { title: string; isAutoGenerated: boolean } => {
        // Si le titre est encore "Nouvelle conversation" ou vide, générer un placeholder
        if (!conversation.title ||
            conversation.title === 'Nouvelle conversation' ||
            conversation.title.trim() === '') {

            // Essayer de générer un titre basé sur le premier message utilisateur
            const firstUserMessage = conversation.messages.find(m => m.role === 'user');
            if (firstUserMessage) {
                const content = firstUserMessage.content.trim();
                const title = content.length > 40
                    ? content.substring(0, 37) + '...'
                    : content;
                return { title, isAutoGenerated: true };
            }

            // Sinon, utiliser un placeholder avec la date
            const date = new Date(conversation.createdAt);
            const title = `Conversation du ${date.toLocaleDateString('fr-FR', {
                day: 'numeric',
                month: 'short',
                hour: '2-digit',
                minute: '2-digit'
            })}`;
            return { title, isAutoGenerated: true };
        }

        return { title: conversation.title, isAutoGenerated: false };
    };

    const formatDate = (timestamp: number) => {
        const date = new Date(timestamp);
        const now = new Date();
        const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);

        if (diffInHours < 24) {
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        } else if (diffInHours < 24 * 7) {
            return date.toLocaleDateString([], { weekday: 'short' });
        } else {
            return date.toLocaleDateString([], { month: 'short', day: 'numeric' });
        }
    };

    const handleRename = (conversation: ConversationData, event: React.MouseEvent) => {
        event.stopPropagation(); // Empêcher le clic de se propager
        setEditingId(conversation.id);
        setEditTitle(conversation.title);
    };

    const handleDelete = (conversationId: string, event: React.MouseEvent) => {
        event.stopPropagation(); // Empêcher le clic de se propager
        if (confirm('Êtes-vous sûr de vouloir supprimer cette conversation ?')) {
            onDeleteConversation(conversationId);
        }
    };

    const handleSaveRename = (event: React.MouseEvent) => {
        event.stopPropagation();
        if (editingId && onRenameConversation && editTitle.trim()) {
            onRenameConversation(editingId, editTitle.trim());
        }
        setEditingId(null);
        setEditTitle('');
    };

    const handleCancelRename = (event: React.MouseEvent) => {
        event.stopPropagation();
        setEditingId(null);
        setEditTitle('');
    };

    const handleConversationClick = (conversationId: string) => {
        onLoadConversation(conversationId);
        setIsDropdownOpen(false);
    };

    const handleNewConversation = () => {
        onNewConversation();
        setIsDropdownOpen(false);
    };

    return (
        <div className={styles.conversationManager}>
            <button
                ref={buttonRef}
                className={styles.conversationButton}
                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                title="Gérer les conversations"
            >
                <ObsidianIcon iconName="message-circle" />
                <span className={styles.conversationTitle}>
                    {currentConversation ? getDisplayTitle(currentConversation).title : 'Nouvelle conversation'}
                </span>
                <ObsidianIcon iconName={isDropdownOpen ? 'chevron-up' : 'chevron-down'} />
            </button>

            {isDropdownOpen && (
                <div ref={dropdownRef} className={styles.conversationDropdown}>
                    <div className={styles.conversationActions}>
                        <button
                            className={styles.newConversationButton}
                            onClick={handleNewConversation}
                        >
                            <ObsidianIcon iconName="plus" />
                            Nouvelle conversation
                        </button>
                    </div>

                    <div className={styles.conversationList}>
                        {conversations.length === 0 ? (
                            <div className={styles.emptyState}>
                                <span>Aucune conversation sauvegardée</span>
                            </div>
                        ) : (
                            conversations.map((conversation) => (
                                <div
                                    key={conversation.id}
                                    className={`${styles.conversationItem} ${
                                        currentConversation?.id === conversation.id ? styles.active : ''
                                    }`}
                                >
                                    {editingId === conversation.id ? (
                                        <div className={styles.editMode}>
                                            <input
                                                type="text"
                                                value={editTitle}
                                                onChange={(e) => setEditTitle(e.target.value)}
                                                className={styles.editInput}
                                                onKeyDown={(e) => {
                                                    e.stopPropagation();
                                                    if (e.key === 'Enter') handleSaveRename(e as any);
                                                    if (e.key === 'Escape') handleCancelRename(e as any);
                                                }}
                                                autoFocus
                                            />
                                            <div className={styles.editActions}>
                                                <button
                                                    onClick={handleSaveRename}
                                                    className={styles.saveButton}
                                                    title="Sauvegarder"
                                                >
                                                    <ObsidianIcon iconName="check" />
                                                </button>
                                                <button
                                                    onClick={handleCancelRename}
                                                    className={styles.cancelButton}
                                                    title="Annuler"
                                                >
                                                    <ObsidianIcon iconName="x" />
                                                </button>
                                            </div>
                                        </div>
                                    ) : (
                                        <>
                                            <div
                                                className={styles.conversationInfo}
                                                onClick={() => handleConversationClick(conversation.id)}
                                            >
                                                <div
                                                    className={styles.conversationName}
                                                    data-auto-generated={getDisplayTitle(conversation).isAutoGenerated}
                                                >
                                                    {getDisplayTitle(conversation).title}
                                                </div>
                                                <div className={styles.conversationMeta}>
                                                    <span className={styles.messageCount}>
                                                        {conversation.messages.length} messages
                                                    </span>
                                                    <span className={styles.conversationDate}>
                                                        {formatDate(conversation.updatedAt)}
                                                    </span>
                                                </div>
                                            </div>
                                            <div className={styles.conversationItemActions}>
                                                {onRenameConversation && (
                                                    <button
                                                        onClick={(e) => handleRename(conversation, e)}
                                                        className={styles.actionButton}
                                                        title="Renommer"
                                                    >
                                                        <ObsidianIcon iconName="edit-3" />
                                                    </button>
                                                )}
                                                <button
                                                    onClick={(e) => handleDelete(conversation.id, e)}
                                                    className={styles.deleteButton}
                                                    title="Supprimer"
                                                >
                                                    <ObsidianIcon iconName="trash-2" />
                                                </button>
                                            </div>
                                        </>
                                    )}
                                </div>
                            ))
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};
