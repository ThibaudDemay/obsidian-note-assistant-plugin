diff --git a/src/backends/onnx.js b/src/backends/onnx.js
index a64f9d1..2e77d38 100644
--- a/src/backends/onnx.js
+++ b/src/backends/onnx.js
@@ -6,13 +6,13 @@
  * So, we just import both packages, and use the appropriate one based on the environment:
  *   - When running in node, we use `onnxruntime-node`.
  *   - When running in the browser, we use `onnxruntime-web` (`onnxruntime-node` is not bundled).
- *
+ *
  * This module is not directly exported, but can be accessed through the environment variables:
  * ```javascript
  * import { env } from '@huggingface/transformers';
  * console.log(env.backends.onnx);
  * ```
- *
+ *
  * @module backends/onnx
  */

@@ -20,7 +20,6 @@ import { env, apis } from '../env.js';

 // NOTE: Import order matters here. We need to import `onnxruntime-node` before `onnxruntime-web`.
 // In either case, we select the default export if it exists, otherwise we use the named export.
-import * as ONNX_NODE from 'onnxruntime-node';
 import * as ONNX_WEB from 'onnxruntime-web';

 export { Tensor } from 'onnxruntime-common';
@@ -45,7 +44,7 @@ const DEVICE_TO_EXECUTION_PROVIDER_MAPPING = Object.freeze({
     'webnn-cpu': { name: 'webnn', deviceType: 'cpu' }, // WebNN CPU
 });

-/**
+/**
  * The list of supported devices, sorted by priority/performance.
  * @type {import("../utils/devices.js").DeviceType[]}
  */
@@ -59,32 +58,6 @@ const ORT_SYMBOL = Symbol.for('onnxruntime');
 if (ORT_SYMBOL in globalThis) {
     // If the JS runtime exposes their own ONNX runtime, use it
     ONNX = globalThis[ORT_SYMBOL];
-
-} else if (apis.IS_NODE_ENV) {
-    ONNX = ONNX_NODE.default ?? ONNX_NODE;
-
-    // Updated as of ONNX Runtime 1.20.1
-    // The following table lists the supported versions of ONNX Runtime Node.js binding provided with pre-built binaries.
-    // | EPs/Platforms | Windows x64 | Windows arm64 | Linux x64         | Linux arm64 | MacOS x64 | MacOS arm64 |
-    // | ------------- | ----------- | ------------- | ----------------- | ----------- | --------- | ----------- |
-    // | CPU           | ✔️          | ✔️            | ✔️                | ✔️          | ✔️        | ✔️          |
-    // | DirectML      | ✔️          | ✔️            | ❌                | ❌          | ❌        | ❌          |
-    // | CUDA          | ❌          | ❌            | ✔️ (CUDA v11.8)   | ❌          | ❌        | ❌          |
-    switch (process.platform) {
-        case 'win32': // Windows x64 and Windows arm64
-            supportedDevices.push('dml');
-            break;
-        case 'linux': // Linux x64 and Linux arm64
-            if (process.arch === 'x64') {
-                supportedDevices.push('cuda');
-            }
-            break;
-        case 'darwin': // MacOS x64 and MacOS arm64
-            break;
-    }
-
-    supportedDevices.push('cpu');
-    defaultDevices = ['cpu'];
 } else {
     ONNX = ONNX_WEB;

diff --git a/src/env.js b/src/env.js
index 7802e50..2ace0a8 100644
--- a/src/env.js
+++ b/src/env.js
@@ -1,24 +1,24 @@
 /**
  * @file Module used to configure Transformers.js.
- *
+ *
  * **Example:** Disable remote models.
  * ```javascript
  * import { env } from '@huggingface/transformers';
  * env.allowRemoteModels = false;
  * ```
- *
+ *
  * **Example:** Set local model path.
  * ```javascript
  * import { env } from '@huggingface/transformers';
  * env.localModelPath = '/path/to/local/models/';
  * ```
- *
+ *
  * **Example:** Set cache directory.
  * ```javascript
  * import { env } from '@huggingface/transformers';
  * env.cacheDir = '/path/to/cache/directory/';
  * ```
- *
+ *
  * @module env
  */

@@ -29,14 +29,14 @@ import url from 'node:url';
 const VERSION = '3.6.3';

 // Check if various APIs are available (depends on environment)
-const IS_BROWSER_ENV = typeof window !== "undefined" && typeof window.document !== "undefined";
-const IS_WEBWORKER_ENV = typeof self !== "undefined" && (['DedicatedWorkerGlobalScope', 'ServiceWorkerGlobalScope', 'SharedWorkerGlobalScope'].includes(self.constructor?.name));
+const IS_BROWSER_ENV = true;
+const IS_WEBWORKER_ENV = false;
 const IS_WEB_CACHE_AVAILABLE = typeof self !== "undefined" && 'caches' in self;
 const IS_WEBGPU_AVAILABLE = typeof navigator !== 'undefined' && 'gpu' in navigator;
 const IS_WEBNN_AVAILABLE = typeof navigator !== 'undefined' && 'ml' in navigator;

 const IS_PROCESS_AVAILABLE = typeof process !== 'undefined';
-const IS_NODE_ENV = IS_PROCESS_AVAILABLE && process?.release?.name === 'node';
+const IS_NODE_ENV = false;
 const IS_FS_AVAILABLE = !isEmpty(fs);
 const IS_PATH_AVAILABLE = !isEmpty(path);

